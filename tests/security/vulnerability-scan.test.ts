import { securityAuditing } from '@/lib/security/security-auditing';

describe('Security Vulnerability Scanning', () => {
  describe('scanForVulnerabilities', () => {
    it('should detect common security vulnerabilities', async () => {
      const testCode = `
        const password = "admin123";
        const sql = "SELECT * FROM users WHERE id = " + userId;
        eval(userInput);
        const token = localStorage.getItem('auth');
      `;

      const vulnerabilities = await securityAuditing.performVulnerabilityScan('code', 'test-code-snippet.js');

      expect(vulnerabilities.findings.length).greaterThan(0);
      expect(vulnerabilities.findings.some((v: any) => v.title.includes('SQL Injection'))).to.be.true;
      expect(vulnerabilities.findings.some((v: any) => v.title.includes('Weak password policy'))).to.be.true;
    });

    it('should scan different file types', async () => {
      const jsCode = 'const apiKey = "sk-123456789";';
      const pythonCode = 'password = "secret123"';

      const jsVulns = await securityAuditing.performVulnerabilityScan('code', 'test-js-code.js');
      const pyVulns = await securityAuditing.performVulnerabilityScan('code', 'test-python-code.py');

      expect(jsVulns.findings.some((v: any) => v.title.includes('SQL Injection'))).to.be.true;
      expect(pyVulns.findings.some((v: any) => v.title.includes('SQL Injection'))).to.be.true;
    });

    it('should handle empty or safe code', async () => {
      const safeCode = `
        const user = getUser(id);
        const result = await db.query('SELECT * FROM users WHERE id = $1', [id]);
        const token = req.headers.authorization;
      `;

      const vulnerabilities = await securityAuditing.performVulnerabilityScan('code', 'safe-code-snippet.js');

      expect(vulnerabilities.findings.filter(v => v.severity === 'high').length).to.equal(0);
    });
  });

  describe('generateSecurityReport', () => {
    it('should generate comprehensive security report', async () => {
      // Mock some security events for the report
      await securityAuditing.logSecurityEvent({
        eventType: 'security_incident',
        severity: 'critical',
        ipAddress: '127.0.0.1',
        userAgent: 'test-agent',
        resource: 'test-resource',
        action: 'test-action',
        outcome: 'detected',
        details: { vulnerability: 'critical-vulnerability' },
      });
      await securityAuditing.logSecurityEvent({
        eventType: 'suspicious_activity',
        severity: 'high',
        ipAddress: '127.0.0.1',
        userAgent: 'test-agent',
        resource: 'test-resource',
        action: 'test-action',
        outcome: 'detected',
        details: { activity: 'unusual-login' },
      });
      await securityAuditing.logSecurityEvent({
        eventType: 'authentication',
        severity: 'medium',
        ipAddress: '127.0.0.1',
        userAgent: 'test-agent',
        resource: 'test-resource',
        action: 'login',
        outcome: 'failure',
        details: { user: 'test-user' },
      });

      const timeRange = {
        start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // Last 7 days
        end: new Date(),
      };

      const report = await securityAuditing.generateSecurityReport(timeRange);

      expect(report.summary.totalEvents).greaterThanOrEqual(3);
      expect(report.summary.eventsBySeverity.critical).greaterThanOrEqual(1);
      expect(report.summary.eventsBySeverity.high).greaterThanOrEqual(1);
      expect(report.summary.eventsBySeverity.medium).greaterThanOrEqual(1);
      expect(report.recommendations.length).greaterThan(0);
    });

    it('should handle no events', async () => {
      const timeRange = {
        start: new Date(0), // Very old start date
        end: new Date(0),   // Very old end date
      };
      const report = await securityAuditing.generateSecurityReport(timeRange);

      expect(report.summary.totalEvents).to.equal(0);
      expect(report.summary.eventsBySeverity).to.deep.equal({});
      expect(report.recommendations.length).to.equal(0);
    });
  });
});
